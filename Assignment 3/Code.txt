import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.Deque;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

public class dbscan {

	public static void main(String args[]) throws NumberFormatException, IOException {

		int[][] dataMat= read();
		//System.out.println(Arrays.deepToString(dataMat));
		double euclidDist[][]=calcEDist(dataMat);
		int[] origOutliers=new int[1000];
		for(int i=0;i<1000;i++)
			origOutliers[i]=dataMat[i][24];
		int[] calcOutliers=new int[1000];
		double avgDist=0;
		for(int i=0;i<1000;i++)
			for(int j=0;j<1000;j++)
				avgDist+=euclidDist[i][j];
		avgDist/=1000000;
		int[] k= {(int) (0.01*1000),(int) (0.02*1000),(int)(0.03*1000),(int) (0.005*1000),(int) (0.008*1000)};
		double[] eps= {0.01*avgDist, 0.02*avgDist,0.03*avgDist, 0.005*avgDist,0.008*avgDist};
		
		dbscanAlgo(origOutliers,calcOutliers,euclidDist,k[0],eps[0]);
		dbscanAlgo(origOutliers,calcOutliers,euclidDist,k[1],eps[1]);
		dbscanAlgo(origOutliers,calcOutliers,euclidDist,k[2],eps[2]);
		dbscanAlgo(origOutliers,calcOutliers,euclidDist,k[3],eps[3]);
		dbscanAlgo(origOutliers,calcOutliers,euclidDist,k[4],eps[4]);
		dbscanAlgo(origOutliers,calcOutliers,euclidDist,70,4.5);

	}
	
	static int[][] read() throws NumberFormatException, IOException{

		int[][] matrix = null;

		BufferedReader buffer = new BufferedReader(new FileReader("D:\\stuff\\Academics\\4-2\\Data Mining\\Assignment 3\\data.txt"));

		String line;
		int row = 0;
		int size = 0;

		while ((line = buffer.readLine()) != null) {
			String[] vals = line.trim().split("\\s+");

			// Lazy instantiation.
			if (matrix == null) {
				size = vals.length;
				matrix = new int[1000][size];
			}
			for (int col = 0; col < size; col++) {
				matrix[row][col] = Integer.parseInt(vals[col]);
			}
			row++;
		}
		return matrix;
	}
	
	static double[][] calcEDist(int dataMat[][]){
		double[][] euclidDist=new double[1000][1000];
		double sumOfSqr;
		for(int i=0;i<1000;i++) {
			for(int j=0;j<1000;j++) {
				if(i==j) {
					euclidDist[i][i]=0;
					continue;
				}
				sumOfSqr=0;
				for(int k=0;k<=23;k++) {
					sumOfSqr+=(dataMat[i][k]-dataMat[j][k])*(dataMat[i][k]-dataMat[j][k]);
				}
				euclidDist[i][j]=Math.sqrt(sumOfSqr);
				euclidDist[j][i]=euclidDist[i][j];
			}
		}
		return euclidDist;
	}

	static void dbscanAlgo(int[] origOutliers,int[] calcOutliers,double[][] euclidDist,int k,double eps) {
		Deque<Integer> deq = new LinkedList<Integer>();
		int count;
		for(int i=0;i<1000;i++) {
			count=0;
			for(int j=0;j<1000;j++) {
				if(i==j)
					continue;
				if(euclidDist[i][j]<eps) {
					count++;
					deq.add(j);
				}
			}
			if(count<k) {
				for(int a=0;a<count;a++)
					deq.removeLast();
			}
			else
				calcOutliers[i]=1;
		}
		while(deq.size()>0) {
			calcOutliers[deq.removeLast()]=1;
		}
		int totalNoOfOutliers=0;
		for(int i=0;i<1000;i++)
			if(origOutliers[i]!=1)
				totalNoOfOutliers++;
		int totalNoOfOutliersDetected=0;
		for(int i=0;i<1000;i++)
			if(calcOutliers[i]!=1&&origOutliers[i]!=1)
				totalNoOfOutliersDetected++;
		System.out.println("Epsilon:"+eps+"\nK:"+k+"\nAccuracy of Outlier Detection:"+(totalNoOfOutliersDetected/totalNoOfOutliers)*100+"\n");
	}
}
